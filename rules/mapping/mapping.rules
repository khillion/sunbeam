# -*- mode: Snakemake -*-

from sunbeamlib import samtools, mapping

rule all_mapping:
    input: TARGET_MAPPING

rule only_mapping:
    input:
        expand(
            str(MAPPING_FP/"{genome}"/'mapping_stats.csv'),
            genome=GenomeSegments.keys()
        )

rule count_ref:
    input:
        expand(
            str(MAPPING_FP/"{genome}"/'ref_counts.csv'),
            genome=GenomeSegments.keys()
        )

rule build_genome_index:
    input:
        str(Cfg['mapping']['genomes_fp']/'{genome}.fasta')
    output:
        str(Cfg['mapping']['genomes_fp']/'{genome}.fasta.amb')
    shell:
        "cd {Cfg[mapping][genomes_fp]} && bwa index {input}"

rule align_to_genome:
    input:
        reads = expand(
            str(QC_FP/'decontam'/'{{sample}}_{rp}.fastq.gz'),
            rp = Pairs),
        index = str(Cfg['mapping']['genomes_fp']/'{genome}.fasta.amb')
    output:
        temp(str(MAPPING_FP/'intermediates'/'{genome}'/'{sample}.sam'))
    threads:
        Cfg['mapping']['threads']
    params:
        index_fp = str(Cfg['mapping']['genomes_fp'])
    shell:
        """
        bwa mem -M -t {threads} \
        {params.index_fp}/{wildcards.genome}.fasta \
        {input.reads} -o {output}
        """

rule samtools_convert:
    input:
        str(MAPPING_FP/'intermediates'/'{genome}'/'{sample}.sam')
    output:
        str(MAPPING_FP/'{genome}'/'{sample}.bam')
    threads:
        Cfg['mapping']['threads']
    shell:
        """
        samtools view -@ {threads} -b {Cfg[mapping][samtools_opts]} {input} | \
        samtools sort -@ {threads} > {output}
        """

rule samtools_stats_summary:
    input:
        str(MAPPING_FP/'{genome}'/'{sample}.bam')
    output:
        temp(str(MAPPING_FP/'intermediates'/'{genome}'/'{sample}.sn.stats'))
    threads:
        Cfg['mapping']['threads']
    shell:
        "samtools stats -@ {threads} {input} | grep ^SN | cut -f 2- > {output}"

rule count_unique_ref:
    input:
        str(MAPPING_FP/'{genome}'/'{sample}.bam')
    output:
        temp(str(MAPPING_FP/'intermediates'/'{genome}'/'{sample}_ref_counts.txt'))
    params:
        exclude_flag = str(Cfg['mapping']['count_unique_ref']['exclude_flag'])
    shell:
        "samtools view -FÂ {params.exclude_flag} {input} | cut -f3 | sort | uniq -c > {output}"

rule mapping_stats:
    input:
        expand(
            str(MAPPING_FP/"intermediates"/"{{genome}}"/"{sample}.sn.stats"),
            sample=Samples.keys()
        )
    output:
        str(MAPPING_FP/'{genome}'/'mapping_stats.csv')
    run:
        mapping.generate_mapping_sn_stats(input, output[0])

rule all_count_ref:
    input:
        expand(
            str(MAPPING_FP/"intermediates"/"{{genome}}"/"{sample}_ref_counts.txt"),
            sample=Samples.keys()
        )
    output:
        str(MAPPING_FP/'{genome}'/'ref_counts.csv')
    run:
        mapping.build_gene_count_matrix(input, output[0])

def _sorted_csvs(w):
    pattern = str(MAPPING_FP/'intermediates'/w.genome/'{sample}.csv')
    paths = sorted(expand(pattern, sample=Samples.keys()))
    return(paths)

rule samtools_summarize_coverage:
    input: _sorted_csvs
    output:
        str(MAPPING_FP/'{genome}'/'coverage.csv')
    shell: "(head -n 1 {input[0]}; tail -q -n +2 {input}) > {output}"

rule samtools_get_coverage:
    input:
        str(MAPPING_FP/'{genome}'/'{sample}.bam')
    output:
        str(MAPPING_FP/'intermediates'/'{genome}'/'{sample}.csv')
    run:
        samtools.get_coverage_stats(
            wildcards.genome, input[0], wildcards.sample, output[0])

rule samtools_index:
    input: str(MAPPING_FP/'{genome}'/'{sample}.bam')
    output: str(MAPPING_FP/'{genome}'/'{sample}.bam.bai')
    shell: "samtools index {input} {output}"


rule samtools_mpileup:
    input:
        bam = str(MAPPING_FP/'{genome}'/'{sample}.bam'),
        genome = str(Cfg['mapping']['genomes_fp']/'{genome}.fasta')
    output: str(MAPPING_FP/'{genome}'/'{sample}.raw.bcf')
    shell:
        """
        samtools mpileup -gf {input.genome} {input.bam} | \
        bcftools call -Ob -v -c - > {output}
        """
